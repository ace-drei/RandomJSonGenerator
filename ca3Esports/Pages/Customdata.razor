@page "/custom"

@using System.Net.Http
@using Newtonsoft.Json
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using System
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@code {
    public class Datum
    {
        public string name { get; set; }
        public string surname { get; set; }
        public string from { get; set; }
        public string birthday { get; set; }
        public string vatId { get; set; }
        public bool boolean { get; set; }
        public int boolean_digit { get; set; }
        public string buildingNumber { get; set; }
        public string building_number { get; set; }
        public string card_expiration { get; set; }
        public string card_type { get; set; }
        public string city { get; set; }
        public string company_name { get; set; }
        public int counter { get; set; }
        public string card_number { get; set; }
        public string country { get; set; }
        public string countryCode { get; set; }
        public string country_code { get; set; }
        public string date { get; set; }
        public string ean { get; set; }
        public string email { get; set; }
        public string image { get; set; }
        public string lastName { get; set; }
        public string last_name { get; set; }
        public double latitude { get; set; }
        public string longText { get; set; }
        public string long_text { get; set; }
        public double longitude { get; set; }
        public string nullValue { get; set; }
        public int number { get; set; }
        public string phone { get; set; }
        public string pokemon { get; set; }
        public string postcode { get; set; }
        public string state { get; set; }
        public string streetAddress { get; set; }
        public string street_name { get; set; }
        public string text { get; set; }
        public string upc { get; set; }
        public string uuid { get; set; }
        public string vat { get; set; }
        public string website { get; set; }
        public string word { get; set; }
    }

    public class Root
    {
        public string status { get; set; }
        public int code { get; set; }
        public int total { get; set; }
        public List<Datum> data { get; set; }
    }

    private List<Datum> customData;
    private Dictionary<string, string> parameterMappings = new Dictionary<string, string>
    {
        { "name", "firstName" },
        { "surname", "lastName" },
        { "from", "country" },
        { "birthday", "date" },
        { "vatId", "vat" },
        { "boolean", "boolean" },
        { "boolean_digit", "boolean_digit" },
        { "buildingNumber", "buildingNumber" },
        { "building_number", "building_number" },
        { "card_expiration", "card_expiration" },
        { "card_type", "card_type" },
        { "city", "city" },
        { "company_name", "company_name" },
        { "counter", "counter" },
        { "card_number", "card_number" },
        { "country", "country" },
        { "countryCode", "countryCode" },
        { "country_code", "country_code" },
        { "date", "date" },
        { "ean", "ean" },
        { "email", "email" },
        { "image", "image" },
        { "lastName", "lastName" },
        { "last_name", "last_name" },
        { "latitude", "latitude" },
        { "longText", "longText" },
        { "long_text", "long_text" },
        { "longitude", "longitude" },
        { "nullValue", "null" },
        { "number", "number" },
        { "phone", "phone" },
        { "pokemon", "pokemon" },
        { "postcode", "postcode" },
        { "state", "state" },
        { "streetAddress", "streetAddress" },
        { "street_name", "street_name" },
        { "text", "text" },
        { "upc", "upc" },
        { "uuid", "uuid" },
        { "vat", "vat" },
        { "website", "website" },
        { "word", "word" }
    };

    private Dictionary<string, bool> checkboxStates = new Dictionary<string, bool>
    {
        { "name", false },
        { "surname", false },
        { "from", false },
        { "birthday", false },
        { "vatId", false },
        { "boolean", false },
        { "boolean_digit", false },
        { "buildingNumber", false },
        { "building_number", false },
        { "card_expiration", false },
        { "card_type", false },
        { "city", false },
        { "company_name", false },
        { "counter", false },
        { "card_number", false },
        { "country", false },
        { "countryCode", false },
        { "country_code", false },
        { "date", false },
        { "ean", false },
        { "email", false },
        { "image", false },
        { "lastName", false },
        { "last_name", false },
        { "latitude", false },
        { "longText", false },
        { "long_text", false },
        { "longitude", false },
        { "nullValue", false },
        { "number", false },
        { "phone", false },
        { "pokemon", false },
        { "postcode", false },
        { "state", false },
        { "streetAddress", false },
        { "street_name", false },
        { "text", false },
        { "upc", false },
        { "uuid", false },
        { "vat", false },
        { "website", false },
        { "word", false }
    };

    private int quantity = 5; // Default quantity

    private async Task LoadCustomData()
    {
        try
        {
            var selectedParameters = parameterMappings
                .Where(kv => checkboxStates[kv.Key])
                .Select(kv => $"{kv.Key}={kv.Value}");

            var apiUrl = $"https://fakerapi.it/api/v1/custom?_quantity={quantity}&{string.Join("&", selectedParameters)}";

            var client = new HttpClient();
            var response = await client.GetAsync(apiUrl);
            response.EnsureSuccessStatusCode();

            var jsonResponse = await response.Content.ReadAsStringAsync();
            var myDeserializedClass = JsonConvert.DeserializeObject<Root>(jsonResponse);

            customData = myDeserializedClass.data;
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., log, display an error message)
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

    private async Task CopyJsonToClipboard()
    {
        var jsonString = JsonConvert.SerializeObject(customData, Formatting.Indented);
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", jsonString);
    }


}

<h3>Custom Data</h3>
<p><b>Please note:</b> This page is displayed differently as it contains long text</p>

<div>
    <label for="quantity">Quantity:</label>
    <input type="number" @bind="quantity" />
</div>

@foreach (var parameter in parameterMappings)
{
        <div>
            <label>
                <input type="checkbox" @bind="checkboxStates[parameter.Key]" />
            @parameter.Key
            </label>
        </div>
}

<button class="btn btn-primary" @onclick="LoadCustomData">Load Custom Data</button>
<button class="btn btn-primary" @onclick="CopyJsonToClipboard">Copy JSON to Clipboard</button>


@if (customData != null)
{
    @foreach (var item in customData)
    {
                <div>
                    <h4>@item.name @item.surname</h4>

            @if (checkboxStates["from"])
            {
                            <p>From: @item.country</p>
            }

            @if (checkboxStates["birthday"])
            {
                            <p>Birthday: @item.date</p>
            }

            @if (checkboxStates["vatId"])
            {
                            <p>VatId: @item.vatId</p>
            }

            @if (checkboxStates["boolean"])
            {
                            <p>Boolean: @item.boolean</p>
            }

            @if (checkboxStates["boolean_digit"])
            {
                            <p>Boolean Digit: @item.boolean_digit</p>
            }

            @if (checkboxStates["buildingNumber"])
            {
                            <p>Building Number: @item.buildingNumber</p>
            }

            @if (checkboxStates["building_number"])
            {
                            <p>Building Number (Underscore): @item.building_number</p>
            }

            @if (checkboxStates["card_expiration"])
            {
                            <p>Card Expiration: @item.card_expiration</p>
            }

            @if (checkboxStates["card_type"])
            {
                            <p>Card Type: @item.card_type</p>
            }

            @if (checkboxStates["city"])
            {
                            <p>City: @item.city</p>
            }

            @if (checkboxStates["company_name"])
            {
                            <p>Company Name: @item.company_name</p>
            }

            @if (checkboxStates["counter"])
            {
                            <p>Counter: @item.counter</p>
            }

            @if (checkboxStates["card_number"])
            {
                            <p>Card Number: @item.card_number</p>
            }

            @if (checkboxStates["country"])
            {
                            <p>Country: @item.country</p>
            }

            @if (checkboxStates["countryCode"])
            {
                            <p>Country Code: @item.countryCode</p>
            }

            @if (checkboxStates["country_code"])
            {
                            <p>Country Code (Underscore): @item.country_code</p>
            }

            @if (checkboxStates["date"])
            {
                            <p>Date: @item.date</p>
            }

            @if (checkboxStates["ean"])
            {
                            <p>EAN: @item.ean</p>
            }

            @if (checkboxStates["email"])
            {
                            <p>Email: @item.email</p>
            }

            @if (checkboxStates["image"])
            {
                            <p>Image: @item.image</p>
            }

            @if (checkboxStates["lastName"])
            {
                            <p>Last Name: @item.lastName</p>
            }

            @if (checkboxStates["last_name"])
            {
                            <p>Last Name (Underscore): @item.last_name</p>
            }

            @if (checkboxStates["latitude"])
            {
                            <p>Latitude: @item.latitude</p>
            }

            @if (checkboxStates["longText"])
            {
                            <p>Long Text: @item.longText</p>
            }

            @if (checkboxStates["long_text"])
            {
                            <p>Long Text (Underscore): @item.long_text</p>
            }

            @if (checkboxStates["longitude"])
            {
                            <p>Longitude: @item.longitude</p>
            }

            @if (checkboxStates["nullValue"])
            {
                            <p>Null Value: @item.nullValue</p>
            }

            @if (checkboxStates["number"])
            {
                            <p>Number: @item.number</p>
            }

            @if (checkboxStates["phone"])
            {
                            <p>Phone: @item.phone</p>
            }

            @if (checkboxStates["pokemon"])
            {
                            <p>Pokemon: @item.pokemon</p>
            }

            @if (checkboxStates["postcode"])
            {
                            <p>Postcode: @item.postcode</p>
            }

            @if (checkboxStates["state"])
            {
                            <p>State: @item.state</p>
            }

            @if (checkboxStates["streetAddress"])
            {
                            <p>Street Address: @item.streetAddress</p>
            }

            @if (checkboxStates["street_name"])
            {
                            <p>Street Name: @item.street_name</p>
            }

            @if (checkboxStates["text"])
            {
                            <p>Text: @item.text</p>
            }

            @if (checkboxStates["upc"])
            {
                            <p>UPC: @item.upc</p>
            }

            @if (checkboxStates["uuid"])
            {
                            <p>UUID: @item.uuid</p>
            }

            @if (checkboxStates["vat"])
            {
                            <p>VAT: @item.vat</p>
            }

            @if (checkboxStates["website"])
            {
                            <p>Website: @item.website</p>
            }

            @if (checkboxStates["word"])
            {
                            <p>Word: @item.word</p>
            }
                </div>
    }
}
else
{
        <p>No data loaded. Click the "Load Custom Data" button to load custom data.</p>
}
